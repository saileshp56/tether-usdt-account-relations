// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Transfer extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Transfer must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transfer", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Transfer | null {
    return changetype<Transfer | null>(
      store.get_in_block("Transfer", id.toHexString())
    );
  }

  static load(id: Bytes): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Relation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Relation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Relation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Relation", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Relation | null {
    return changetype<Relation | null>(store.get_in_block("Relation", id));
  }

  static load(id: string): Relation | null {
    return changetype<Relation | null>(store.get("Relation", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sourceAddress(): Bytes {
    let value = this.get("sourceAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sourceAddress(value: Bytes) {
    this.set("sourceAddress", Value.fromBytes(value));
  }

  get targetAddress(): Bytes {
    let value = this.get("targetAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set targetAddress(value: Bytes) {
    this.set("targetAddress", Value.fromBytes(value));
  }

  get isFriend(): boolean {
    let value = this.get("isFriend");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isFriend(value: boolean) {
    this.set("isFriend", Value.fromBoolean(value));
  }

  get isSponsor(): boolean {
    let value = this.get("isSponsor");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isSponsor(value: boolean) {
    this.set("isSponsor", Value.fromBoolean(value));
  }

  get isBeneficiary(): boolean {
    let value = this.get("isBeneficiary");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isBeneficiary(value: boolean) {
    this.set("isBeneficiary", Value.fromBoolean(value));
  }

  get valueReceived(): BigInt {
    let value = this.get("valueReceived");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set valueReceived(value: BigInt) {
    this.set("valueReceived", Value.fromBigInt(value));
  }

  get valueSent(): BigInt {
    let value = this.get("valueSent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set valueSent(value: BigInt) {
    this.set("valueSent", Value.fromBigInt(value));
  }

  get valueNet(): BigInt {
    let value = this.get("valueNet");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set valueNet(value: BigInt) {
    this.set("valueNet", Value.fromBigInt(value));
  }

  get firstIncomeTimestamp(): BigInt {
    let value = this.get("firstIncomeTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstIncomeTimestamp(value: BigInt) {
    this.set("firstIncomeTimestamp", Value.fromBigInt(value));
  }

  get latestIncomeTimestamp(): BigInt {
    let value = this.get("latestIncomeTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestIncomeTimestamp(value: BigInt) {
    this.set("latestIncomeTimestamp", Value.fromBigInt(value));
  }

  get firstExpenditureTimestamp(): BigInt {
    let value = this.get("firstExpenditureTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstExpenditureTimestamp(value: BigInt) {
    this.set("firstExpenditureTimestamp", Value.fromBigInt(value));
  }

  get latestExpenditureTimestamp(): BigInt {
    let value = this.get("latestExpenditureTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set latestExpenditureTimestamp(value: BigInt) {
    this.set("latestExpenditureTimestamp", Value.fromBigInt(value));
  }

  get incomeTransactions(): Array<Bytes> | null {
    let value = this.get("incomeTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set incomeTransactions(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("incomeTransactions");
    } else {
      this.set("incomeTransactions", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get expenditureTransactions(): Array<Bytes> | null {
    let value = this.get("expenditureTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set expenditureTransactions(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("expenditureTransactions");
    } else {
      this.set(
        "expenditureTransactions",
        Value.fromBytesArray(<Array<Bytes>>value)
      );
    }
  }
}

export class ContactList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ContactList entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ContactList must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ContactList", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ContactList | null {
    return changetype<ContactList | null>(
      store.get_in_block("ContactList", id)
    );
  }

  static load(id: string): ContactList | null {
    return changetype<ContactList | null>(store.get("ContactList", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get friends(): Array<Bytes> | null {
    let value = this.get("friends");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set friends(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("friends");
    } else {
      this.set("friends", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get sponsors(): Array<Bytes> | null {
    let value = this.get("sponsors");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set sponsors(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("sponsors");
    } else {
      this.set("sponsors", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get beneficiaries(): Array<Bytes> | null {
    let value = this.get("beneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set beneficiaries(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("beneficiaries");
    } else {
      this.set("beneficiaries", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get numberOfFriends(): BigInt {
    let value = this.get("numberOfFriends");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numberOfFriends(value: BigInt) {
    this.set("numberOfFriends", Value.fromBigInt(value));
  }
}
